components_manager:
    task_processors:                  # Task processor is an executor for coroutine tasks

        main-task-processor:          # Make a task processor for CPU-bound coroutine tasks.
            worker_threads: $worker-threads         # Process tasks in 4 threads.

        fs-task-processor:            # Make a separate task processor for filesystem bound tasks.
            worker_threads: $worker-fs-threads

        consumer-task-processor: # Task processor for listenting messages from topics
            thread_name: consumer
            worker_threads: 1     # Threads are shared between all consumers in program
        producer-task-processor: # Task processor for handling message delivery reports
            thread_name: producer
            worker_threads: 4     # Threads are shared between all producers in program

    default_task_processor: main-task-processor

    components:                       # Configuring components that were registered via component_list
        server:
            listener:                 # configuring the main listening socket...
                port: $server-port            # ...to listen on this port and...
                task_processor: main-task-processor    # ...process incoming requests on this task processor.
        logging:
            fs-task-processor: fs-task-processor
            loggers:
                default:
                    file_path: '@stderr'
                    level: $logger-level
                    overflow_behavior: discard  # Drop logs if the system is too busy to write them down.

        # Dynamic config options. Cache is disabled, updates are disabled.
        dynamic-config:
            # For most of userver dynamic configs, defaults are used, some are overridden here.
            # See userver "dynamic config" docs for what configs exist.
            defaults:
                HTTP_CLIENT_CONNECTION_POOL_SIZE: 1000
                POSTGRES_DEFAULT_COMMAND_CONTROL:
                    network_timeout_ms: 750
                    statement_timeout_ms: 500

        testsuite-support: {}
        secdist:
            provider: default-secdist-provider
        default-secdist-provider:                        # Component that loads configuration of hosts and passwords
            config: /service_template/configs/secure_data.json  # Values are supposed to be stored in this file
            missing-ok: false                             # ... but if the file is missing it is still ok
            environment-secrets-key: SECDIST_CONFIG      # ... values will be loaded from this environment value

        kafka-consumer:                  # Kafka consumer component name must start with kafka-consumer
            group_id: test-group         # Consumers group current consumer will join on start
            topics:                      # List of topics consumer starts to listen
                - send-photo-data
            auto_offset_reset: smallest  # Strategy for reading topics without committed offsets
            max_batch_size: 5            # Number of messages consumers waits until user-callback is called
            security_protocol: PLAINTEXT # Broker connection settings

        kafka-producer:                   # Kafka producer component name must start with kafka-producer
            delivery_timeout: 10s         # Timeout for message delivery
            queue_buffering_max: 100ms    # Time, producer waits before sending a message
            enable_idempotence: true      # Whether to enable idempotence mode
            security_protocol: PLAINTEXT  # Broker connection settings

        http-client:
            load-enabled: $is_testing
            fs-task-processor: fs-task-processor

        dns-client:
            fs-task-processor: fs-task-processor

        tests-control:
            load-enabled: $is_testing
            path: /tests/{action}
            method: POST
            task_processor: main-task-processor
        handler-ping:
            path: /ping
            method: GET
            task_processor: main-task-processor
            throttling_enabled: false
            url_trailing_slash: strict-match

        handler-hello:                    # Finally! Our handler.
            path: /hello                  # Registering handler by URL '/hello'.
            method: GET,POST              # It will only reply to GET (HEAD) and POST requests.
            task_processor: main-task-processor  # Run it on CPU bound task processor

        handler-user-register:
            path: /user
            method: POST
            task_processor: main-task-processor

        handler-user-info:
            path: /user_info
            method: POST
            task_processor: main-task-processor

        producer-handler:
            path: /produce                      # Registering handler by URL '/produce'.
            method: POST                        # POST requests only.
            task_processor: main-task-processor # Run it on CPU bound task processor

        consumer-handler:

        postgres-db:
            dbconnection: $dbconnection
            dbconnection#env: DB_CONNECTION
            blocking_task_processor: fs-task-processor
            dns_resolver: async
            sync-start: false
            connlimit_mode: manual